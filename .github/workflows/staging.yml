name: Deploy Staging

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_BACKEND: ghcr.io/${{ github.repository_owner }}/documaker-backend
  IMAGE_FRONTEND: ghcr.io/${{ github.repository_owner }}/documaker-frontend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: backend/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_BACKEND }}:staging
            ${{ env.IMAGE_BACKEND }}:${{ github.sha }}

      - name: Build and push frontend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: frontend/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_FRONTEND }}:staging
            ${{ env.IMAGE_FRONTEND }}:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_SSH_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            set -e
            mkdir -p /opt/documaker-staging
            cd /opt/documaker-staging

            echo "Logging into GHCR"
            echo ${{ secrets.GHCR_PAT }} | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

            cat > .env <<'ENVEOF'
            DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}
            SECRET_KEY=${{ secrets.STAGING_SECRET_KEY }}
            OPENROUTER_API_KEY=${{ secrets.STAGING_OPENROUTER_API_KEY }}
            OPENAI_API_KEY=${{ secrets.STAGING_OPENAI_API_KEY }}
            APP_URL=${{ secrets.STAGING_APP_URL }}
            VITE_API_BASE=${{ secrets.STAGING_VITE_API_BASE }}
            ENVEOF

            cat > docker-compose.yml <<'COMPOSEEOF'
            version: '3.9'
            services:
              backend:
                image: ghcr.io/${OWNER}/documaker-backend:staging
                env_file: .env
                environment:
                  ENVIRONMENT: production
                  LOG_LEVEL: INFO
                  ALLOWED_HOSTS: "*"
                  CORS_ORIGINS: "*"
                restart: unless-stopped
                ports:
                  - '8001:8001'
              frontend:
                image: ghcr.io/${OWNER}/documaker-frontend:staging
                env_file: .env
                environment:
                  VITE_API_BASE: ${VITE_API_BASE}
                restart: unless-stopped
                ports:
                  - '80:80'
                depends_on:
                  - backend
            COMPOSEEOF

            # Substitute OWNER variable in compose file
            OWNER=${{ github.repository_owner }}
            VITE_API_BASE=${{ secrets.STAGING_VITE_API_BASE }}
            sed -i "s#\${OWNER}#${OWNER}#g" docker-compose.yml
            sed -i "s#\${VITE_API_BASE}#${VITE_API_BASE}#g" docker-compose.yml

            docker compose pull
            docker compose up -d
            docker image prune -f
